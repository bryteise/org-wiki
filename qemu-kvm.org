* qemu-kvm
** Fedora
*** Install
Works the same as the Ubuntu install below
*** Configuration
**** Netowrk
http://fedoraunity.org/Members/kc8hfi/qemu-kvm-bridged-networking
su
yum install bridge-utils tunctl libvirt qemu-kvm
service NetworkManager stop
chkconfig NetworkManager off
chkconfig network on
brctl addbr br0

create
/etc/sysconfig/network-scripts/ifcfg-br0
# Networking Interface
DEVICE=br0
ONBOOT=yes
BOOTPROTO=dhcp
TYPE=Bridge
USERCTL=yes
NM_CONTROLLED=no
IPV6INIT=no
NAME="bridge"
PEERNTP=yes

edit
/etc/sysconfig/network-scripts/ifcfg-eth0
NM_CONTROLLED=no
BRIDGE=br0

edit
/etc/rc.d/rc.local
#substitute tap0, br0, username to whatever your information is
interface="tap0"
bridge="br0"
username=”<your username>”
#add a tap interface owned by your user
tunctl -u $username -t $interface
#add this interface to the bridge
brctl addif $bridge $interface
#bring the interface up
ifconfig $interface up

groupadd kvm
usermod -a -G kvm <your username>

Create a file in the directory /etc/udev/rules.d called 99-kvm.rules.
Add the following to that file:
KERNEL=="kvm",MODE="0660",GROUP="kvm"

service libvirtd restart
service network restart
** Ubuntu
https://help.ubuntu.com/community/KVM/
*** Install
sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder
bridge-utils virt-manager libcap2-bin qemu
After the installation, you need to relogin so that your user becomes
an effective member of the libvirtd group. The members of this group
can run virtual machines.
*** Configuration
**** Network
Give qemu the inheritable CAP_NET_ADMIN capability:
sudo setcap cap_net_admin=ei /usr/bin/qemu-system-*
Allow specific users to gain the inheritable CAP_NET_ADMIN capability
by editing /etc/security/capability.conf:
cap_net_admin        USER-NAME-HERE
First stop networking:
sudo invoke-rc.d networking stop
To set up a bridge interface, edit /etc/network/interfaces and either
comment or replace the existing config with (for DHCP):
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet manual

auto br0
iface br0 inet dhcp
        bridge_ports eth0
        bridge_stp off
        bridge_fd 0
        bridge_maxwait 0

Now restart networking:
sudo /etc/init.d/networking restart
**** Create VM
http://libvirt.org/
http://manpages.ubuntu.com/manpages/maverick/man1/virsh.1.html
http://www.techotopia.com/index.php/Installing_and_Configuring_Fedora_KVM_Virtualization

I find using virt-manager to create initial install and dumpxml in virsh to
make new VMs is easier.  Customizing after initial xml export seems
more manageable as well.

Using the virt-manager to create new storage pools and virtual drives
(that can be dumped to xml and configured or duplicated) is also
easy.
(note dumping images to xml uses the following command, where wdouglas
is the pool and general-dev.img is the image file name)
virsh vol-dumpxml --pool wdouglas general-dev.img
**** Clone VM
http://www.mythicalbeast.co.uk/linux/kvm_howto.html#Making%20Copies%20or%20Cloning%20Existing%20Machines
sudo virt-clone -o kvmubuntu -n kvmhardy -f /data/Virtual_machines/kvmhardy/kvmhardy.img
